# find -type f \! \( -name '*.class' -and -name '*.txt' \) -execdir bash -c "grep -E '\".*\.(so|cu|ptx).*\"' {} /dev/null && pwd" \;

./build.xml:        <include name="*.so.1"/>
/rootbeer1
./build.xml:        <attribute name="Main-Class" value="org.trifort.rootbeer.sort.GPUSort"/>
/rootbeer1/examples/sort
./Compressor.java:      String ret = m.run(m.getLines("../Product/generated.cu"));
./Compressor.java:      PrintWriter writer = new PrintWriter("../Product/gencompress.cu");
/rootbeer1/src/org/trifort/rootbeer/compressor
    => not sure where this relative path leads to, but I think relevant calls
       are commented out anyway
./DeadMethods.java:    dead_methods.parseFile("/home/pcpratts/.rootbeer/generated_unix.cu");
    => this is wrong on many levels and happens at other deadMethods too, but
       I guess those methods are dead ...
/rootbeer1/src/org/trifort/rootbeer/deadmethods
./GenerateForKernel.java:            suffix + ".cubin";
    => I think this is only used for the compile call to Rootbeer.jar, so it
       should be safe for runnin in parallel ?
/rootbeer1/src/org/trifort/rootbeer/generate/bytecode
./OpenCLScene.java:      BufferedReader reader = new BufferedReader(new FileReader("generated.cu"));
    => this line looks weird, because it doesnt use getRootbeerHome, but I
       guess OpenCL doesnt work anyway, because it is comment out in the
       Rootbeer constructor
./OpenCLScene.java:    PrintWriter writer = new PrintWriter(new FileWriter(RootbeerPaths.v().getRootbeerHome()+"generated_unix.cu"));
./OpenCLScene.java:    writer = new PrintWriter(new FileWriter(RootbeerPaths.v().getRootbeerHome()+"generated_windows.cu"));
/rootbeer1/src/org/trifort/rootbeer/generate/opencl
./CudaTweaks.java:      writer = new PrintWriter(RootbeerPaths.v().getRootbeerHome() + "pre_dead.cu");
./CudaTweaks.java:      File generated = new File(RootbeerPaths.v().getRootbeerHome() + "generated.cu");
/rootbeer1/src/org/trifort/rootbeer/generate/opencl/tweaks
./ParallelCompileJob.java:      File code_file = new File(RootbeerPaths.v().getRootbeerHome() +
./ParallelCompileJob.java:        "code_file" + file_string + ".ptx");
/rootbeer1/src/org/trifort/rootbeer/generate/opencl/tweaks

./CUDALoader.java:        m_libCudas.add("/usr/lib/libcuda.so");
./CUDALoader.java:        m_libCudas.add("/usr/lib/x86_64-linux-gnu/libcudart.so.5.0");
./CUDALoader.java:        m_rootbeerRuntimes.add(RootbeerPaths.v().getRootbeerHome()+"rootbeer_x86.so.1");
./CUDALoader.java:        m_rootbeerCudas.add(RootbeerPaths.v().getRootbeerHome()+"rootbeer_cuda_x86.so.1");
./CUDALoader.java:        extract("rootbeer_x86.so.1");
./CUDALoader.java:        extract("rootbeer_cuda_x86.so.1");
./CUDALoader.java:        m_libCudas.add("/usr/lib64/libcuda.so");
./CUDALoader.java:        m_libCudas.add("/usr/lib/x86_64-linux-gnu/libcudart.so.5.0");
./CUDALoader.java:        m_rootbeerRuntimes.add(RootbeerPaths.v().getRootbeerHome()+"rootbeer_x64.so.1");
./CUDALoader.java:        m_rootbeerCudas.add(RootbeerPaths.v().getRootbeerHome()+"rootbeer_cuda_x64.so.1");
./CUDALoader.java:        extract("rootbeer_x64.so.1");
./CUDALoader.java:        extract("rootbeer_cuda_x64.so.1");
/rootbeer1/src/org/trifort/rootbeer/runtime
    => everything should work after changing getRootbeerHome()
./NativeCpuDevice.java:    cmd = "gcc -shared -Wl,-soname,"+name+" -o "+nemu+name+".so.1 "+nemu+"generated.o -lc";
./NativeCpuDevice.java:      cmd = "gcc -shared -Wl,-soname,nativecpudev -o "+nemu+"nativecpudev.so.1 "+nemu+"NativeCpuDevice.o "+nemu+"generated.o -lc";
./NativeCpuDevice.java:      File f1 = new File(nemu+"nativecpudev.so.1");
./NativeCpuDevice.java:    File f2 = new File(nemu+name+".so.1");
/rootbeer1/src/org/trifort/rootbeer/runtime/nemu
    => everything in this file references nemu_file which is set to
       File nemu_file = new File(RootbeerPaths.v().getRootbeerHome()+"nemu");
       so changing getRootbeerHome works for this file
./OpenCLRuntime.java:    File native_runtime = new File("csrc/rootbeer_opencl_runtime_x64.so.1");
/rootbeer1/src/org/trifort/rootbeer/runtime
    => in contrast to CUDALoader.java this file doesnt extract the shared library
       from the .jar. Does this even work? I guess not, because the call to
       this is commented out in the Rootbeer constructor
